---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: scc-initiator
  annotations:
    description: Initiate an SCC scan based on https://test.cloud.ibm.com/apidocs/security-compliance/posture
    app.openshift.io/description: Initiate an SCC scan based on https://test.cloud.ibm.com/apidocs/security-compliance/posture
  
spec:
  params:
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
    - name: location
      description: Endpoint location for the SCC api.  Values are "us" or "eu".

    - name: account_id
      description: IBM Cloud account ID.
    - name: scope_id
      description: The unique ID of the scope.
    - name: profile_id
      description: The unique ID of the profile.
    - name: group_profile_id
      description: The ID of the profile group.
    - name: apikey
      description: IBM Cloud API Key.

      

  steps:
    - name: scc-initiator
      image: $(params.tools-image)
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh
          
          echo "SCC HERE WE GO!"
          echo "apikey $(params.apikey)"


          curl -o token.txt -X POST \
            "https://iam.cloud.ibm.com/identity/token" \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --header 'Accept: application/json' \
            --data-urlencode 'grant_type=urn:ibm:params:oauth:grant-type:apikey' \
            --data-urlencode 'apikey=$(params.apikey)'
        
          


          echo "TOKEN:"
          cat token.txt


          LOCATION="$(params.location)"
          ACCOUNT_ID="$(params.account_id)"
          SCOPE_ID="$(params.scope_id)"
          PROFILE_ID="$(params.profile_id)"
          GROUP_PROFILE_ID="$(params.group_profile_id)"
          IAM_TOKEN=$(jq ".access_token" -r token.txt)

          echo "LOCATION: ${LOCATION}"
          echo "ACCOUNT_ID: ${ACCOUNT_ID}"
          echo "SCOPE_ID: ${SCOPE_ID}"
          echo "PROFILE_ID: ${PROFILE_ID}"
          echo "GROUP_PROFILE_ID: ${GROUP_PROFILE_ID}"
          echo "IAM_TOKEN: ${IAM_TOKEN}"

          printf "\nTesting iam with a call to ghost... \n"
          curl -v -X GET -H "Authorization: Bearer ${IAM_TOKEN}" -H "Accept: application/json" "https://api.global-search-tagging.cloud.ibm.com/v2/resources/supported_types"

          exit 0;

          printf "\nInitiating request to https://${LOCATION}.compliance.cloud.ibm.com/posture/v1/scans/validations?account_id=${ACCOUNT_ID}\n"
          curl -v \
            POST  "https://${LOCATION}.compliance.cloud.ibm.com/posture/v1/scans/validations?account_id=${ACCOUNT_ID}"   \
            -H 'Authorization: Bearer ${IAM_TOKEN}'   \
            -H 'Content-type: application/json'   \
            -d '{
              "scope_id": "${SCOPE_ID}", 
              "profile_id": "${PROFILE_ID}", 
              "group_profile_id": "${GROUP_PROFILE_ID}" 
            }'

          exit 0

          # STATUS=$(curl -s -o response.txt -w "%{http_code}" \
          #   -X POST  "https://${LOCATION}.compliance.cloud.ibm.com/posture/v1/scans/validations?account_id=${ACCOUNT_ID}"   \
          #   -H 'Authorization: Bearer ${IAM_TOKEN}'   \
          #   -H 'Content-type: application/json'   \
          #   -d '{
          #     "scope_id": "${SCOPE_ID}", 
          #     "profile_id": "${PROFILE_ID}", 
          #     "group_profile_id": "${GROUP_PROFILE_ID}" 
          #   }')

          printf "\nSTATUS: ${STATUS}\n"
          jq '.' response.txt   
          if [ $STATUS != "200" ]; then
            #if not http 200, fail the pipeline
            exit 1
          else
            exit 0
          fi
  